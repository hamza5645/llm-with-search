name: Sync to Raycast fork and open PR

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  # Required: create a classic PAT with 'public_repo' (or 'repo') scope and repo RW on your fork.
  # Save it as repository secret RAYCAST_FORK_PAT
  UPSTREAM_OWNER: raycast
  UPSTREAM_REPO: extensions
  EXTENSION_DIR: extensions/llm-with-search
  TARGET_BRANCH: sync/llm-with-search

permissions:
  contents: read
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout canonical repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Preflight config check
        run: |
          set -e
          if [ -z "${{ secrets.RAYCAST_FORK_PAT }}" ]; then
            echo "Missing secret RAYCAST_FORK_PAT" >&2
            exit 1
          fi

      - name: Resolve fork coordinates (owner/repo)
        env:
          GH_TOKEN: ${{ secrets.RAYCAST_FORK_PAT }}
        run: |
          set -e
          # Ensure gh is available
          if ! command -v gh >/dev/null 2>&1; then
            type -p curl >/dev/null || { sudo apt-get update && sudo apt-get install -y curl; }
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt-get update && sudo apt-get install gh -y
          fi

          # Prefer repo variables if provided, otherwise infer from PAT and common fork names
          FORK_OWNER="${{ vars.RAYCAST_FORK_OWNER }}"
          FORK_REPO="${{ vars.RAYCAST_FORK_REPO }}"

          if [ -z "$FORK_OWNER" ]; then
            FORK_OWNER="$(gh api user -q .login)"
          fi

          if [ -z "$FORK_REPO" ]; then
            if gh repo view "$FORK_OWNER/extensions" >/dev/null 2>&1; then
              FORK_REPO="extensions"
            elif gh repo view "$FORK_OWNER/raycast-extensions" >/dev/null 2>&1; then
              FORK_REPO="raycast-extensions"
            else
              echo "Could not determine fork repo. Set repository variable RAYCAST_FORK_REPO (e.g., 'extensions' or 'raycast-extensions')." >&2
              exit 1
            fi
          fi

          echo "Using fork: $FORK_OWNER/$FORK_REPO"
          echo "FORK_OWNER=$FORK_OWNER" >> $GITHUB_ENV
          echo "FORK_REPO=$FORK_REPO" >> $GITHUB_ENV

      - name: Configure git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create minimal repo from upstream main (sparse)
        run: |
          set -e
          mkdir -p fork-repo
          cd fork-repo
          git init
          git remote add upstream https://github.com/${{ env.UPSTREAM_OWNER }}/${{ env.UPSTREAM_REPO }}.git
          # Shallow, blobless fetch of upstream main only
          git -c protocol.version=2 fetch --depth 1 upstream main
          # Enable sparse checkout for only the extension directory
          git sparse-checkout init --cone
          git sparse-checkout set "${EXTENSION_DIR}"
          # Start branch from upstream/main with sparse working tree
          git checkout -B "${TARGET_BRANCH}" FETCH_HEAD
          # Add fork as origin for pushing later using PAT as password (fine-grained compatible)
          git remote add origin https://$FORK_OWNER:${{ secrets.RAYCAST_FORK_PAT }}@github.com/$FORK_OWNER/$FORK_REPO.git

      - name: Sync files into fork subdirectory
        run: |
          set -e
          mkdir -p fork-repo/${EXTENSION_DIR}
          rsync -av --delete --delete-excluded \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'node_modules' \
            --exclude 'dist' \
            --exclude 'build' \
            --exclude 'raycast-extensions' \
            --exclude 'fork-repo' \
            ./ fork-repo/${EXTENSION_DIR}/
          cd fork-repo
          git add -A
          if git diff --cached --quiet; then
            echo "no_changes=true" >> $GITHUB_ENV
            echo "No changes to commit"
          else
            git commit -m "chore: sync llm-with-search from ${GITHUB_REPOSITORY}@${GITHUB_SHA}"
            # Use PAT explicitly for push to avoid runner credential overrides
            git push -f origin "${TARGET_BRANCH}"
            echo "no_changes=false" >> $GITHUB_ENV
          fi

      - name: Open or update PR to upstream
        if: env.no_changes == 'false'
        env:
          GH_TOKEN: ${{ secrets.RAYCAST_FORK_PAT }}
        run: |
          set -e
          cd fork-repo
          # Confirm hub/gh is present, else install gh
          if ! command -v gh >/dev/null 2>&1; then
            type -p curl >/dev/null || sudo apt-get update && sudo apt-get install -y curl
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt-get update && sudo apt-get install gh -y
          fi
          set +e
          PR_NUM=$(gh pr list \
            --repo "${UPSTREAM_OWNER}/${UPSTREAM_REPO}" \
            --head "${FORK_OWNER}:${TARGET_BRANCH}" \
            --state open \
            --json number \
            --jq '.[0].number')
          set -e
          if [ -z "$PR_NUM" ]; then
            gh pr create \
              --repo "${UPSTREAM_OWNER}/${UPSTREAM_REPO}" \
              --head "${FORK_OWNER}:${TARGET_BRANCH}" \
              --base main \
              --title "Add/Update: llm-with-search" \
              --body "Automated sync from ${GITHUB_REPOSITORY}."
          else
            echo "PR already open: #$PR_NUM"
          fi
